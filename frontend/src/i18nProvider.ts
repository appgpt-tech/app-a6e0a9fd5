//Source code generated by AppGPT (www.appgpt.tech)
import { mergeTranslations } from 'ra-core';
import polyglotI18nProvider from 'ra-i18n-polyglot';
import enOriginal from 'ra-language-english';
import frOriginal from 'ra-language-french';
import grOriginal from 'ra-language-greek';

const enResources = {
  resources: {
    DataSource: {
      name: 'Data Source',
      fields: {
        Name: 'Name',
        Type: 'Type',
        Duration: 'Duration',
        Timestamp: 'Timestamp',
        id: 'id',
      },
    },
    PredictionModel: {
      name: 'Prediction Model',
      fields: {
        Name: 'Name',
        Type: 'Type',
        Description: 'Description',
        Parameters: 'Parameters',
        id: 'id',
      },
    },
    Alert: {
      name: 'Alert',
      fields: {
        user: 'User',
        gameRound: 'Game Round',
        alertType: 'Alert Type',
        timestamp: 'Timestamp',
        id: 'id',
      },
    },
    Analysis: {
      name: 'Analysis',
      fields: {
        Name: 'Name',
        Type: 'Type',
        DataSource: 'Data Source',
        ChartGraphType: 'Chart Graph Type',
        Timestamp: 'Timestamp',
        id: 'id',
      },
    },
    RealtimeData: {
      name: 'Real-time Data',
      fields: {
        GameRound: 'Game Round',
        Timestamp: 'Timestamp',
        Data: 'Data',
        Analysis: 'Analysis',
        id: 'id',
      },
    },
  },
};
const frResources = {
  resources: {
    DataSource: {
      name: 'Data Source (fr)',
      fields: {
        Name: 'Name (fr)',
        Type: 'Type (fr)',
        Duration: 'Duration (fr)',
        Timestamp: 'Timestamp (fr)',
        id: 'id',
      },
    },
    PredictionModel: {
      name: 'Prediction Model (fr)',
      fields: {
        Name: 'Name (fr)',
        Type: 'Type (fr)',
        Description: 'Description (fr)',
        Parameters: 'Parameters (fr)',
        id: 'id',
      },
    },
    Alert: {
      name: 'Alert (fr)',
      fields: {
        user: 'User (fr)',
        gameRound: 'Game Round (fr)',
        alertType: 'Alert Type (fr)',
        timestamp: 'Timestamp (fr)',
        id: 'id',
      },
    },
    Analysis: {
      name: 'Analysis (fr)',
      fields: {
        Name: 'Name (fr)',
        Type: 'Type (fr)',
        DataSource: 'Data Source (fr)',
        ChartGraphType: 'Chart Graph Type (fr)',
        Timestamp: 'Timestamp (fr)',
        id: 'id',
      },
    },
    RealtimeData: {
      name: 'Real-time Data (fr)',
      fields: {
        GameRound: 'Game Round (fr)',
        Timestamp: 'Timestamp (fr)',
        Data: 'Data (fr)',
        Analysis: 'Analysis (fr)',
        id: 'id',
      },
    },
  },
};
const grResources = {
  resources: {
    DataSource: {
      name: 'Data Source (gr)',
      fields: {
        Name: 'Name (gr)',
        Type: 'Type (gr)',
        Duration: 'Duration (gr)',
        Timestamp: 'Timestamp (gr)',
        id: 'id',
      },
    },
    PredictionModel: {
      name: 'Prediction Model (gr)',
      fields: {
        Name: 'Name (gr)',
        Type: 'Type (gr)',
        Description: 'Description (gr)',
        Parameters: 'Parameters (gr)',
        id: 'id',
      },
    },
    Alert: {
      name: 'Alert (gr)',
      fields: {
        user: 'User (gr)',
        gameRound: 'Game Round (gr)',
        alertType: 'Alert Type (gr)',
        timestamp: 'Timestamp (gr)',
        id: 'id',
      },
    },
    Analysis: {
      name: 'Analysis (gr)',
      fields: {
        Name: 'Name (gr)',
        Type: 'Type (gr)',
        DataSource: 'Data Source (gr)',
        ChartGraphType: 'Chart Graph Type (gr)',
        Timestamp: 'Timestamp (gr)',
        id: 'id',
      },
    },
    RealtimeData: {
      name: 'Real-time Data (gr)',
      fields: {
        GameRound: 'Game Round (gr)',
        Timestamp: 'Timestamp (gr)',
        Data: 'Data (gr)',
        Analysis: 'Analysis (gr)',
        id: 'id',
      },
    },
  },
};

const en = mergeTranslations(enOriginal, enResources);
const fr = mergeTranslations(frOriginal, frResources);
const gr = mergeTranslations(grOriginal, grResources);

const translations = { en, fr, gr };
export const i18nProvider = polyglotI18nProvider(
  (locale) => translations[locale],
  'en', //default locale
  [
    { locale: 'en', name: 'English' },
    { locale: 'fr', name: 'Français' },
    { locale: 'gr', name: 'Ελληνικά' },
  ],
);
